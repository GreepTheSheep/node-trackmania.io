name: Publish dev
on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'
jobs:
  npm:
    name: npm
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ref: 'develop'

      - name: Install Node v16
        uses: actions/setup-node@v2
        with:
          node-version: 16
          registry-url: https://registry.npmjs.org/
          cache: npm

      - name: Check previous released version
        id: pre-release
        run: |
          if [[ $(npm view trackmania.io@dev version | grep -e "$(jq --raw-output '.version' package.json).*.$(git rev-parse --short HEAD | cut -b1-3)") ]]; \
          then echo '::set-output name=release::false'; \
          else echo '::set-output name=release::true'; fi

      - name: Install dependencies
        if: steps.pre-release.outputs.release == 'true'
        run: npm ci --ignore-scripts

      - name: Deprecate old versions
        if: steps.pre-release.outputs.release == 'true'
        run: npm deprecate trackmania.io@"~$(jq --raw-output '.version' package.json)" "no longer supported" || true
        env:
          NODE_AUTH_TOKEN: ${{ secrets.npm_token }}

      - name: Publish
        if: steps.pre-release.outputs.release == 'true'
        run: |
          npm version --git-tag-version=false $(jq --raw-output '.version' package.json).$(date +%d%m%a).$(git rev-parse --short HEAD)
          npm publish --tag dev || true
        env:
          NODE_AUTH_TOKEN: ${{ secrets.npm_token }}

  prerelease:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: 'develop'

      - name: Install Node v16
        uses: actions/setup-node@v2
        with:
          node-version: 16
          registry-url: https://registry.npmjs.org/
          cache: npm

      - name: Check previous released version
        id: pre-release
        run: |
          if [[ $(npm view trackmania.io@dev version | grep -e "$(jq --raw-output '.version' package.json).*.$(git rev-parse --short HEAD | cut -b1-3)") ]]; \
          then echo '::set-output name=release::false'; \
          else echo '::set-output name=release::true'; fi

      - name: Get Version
        if: steps.pre-release.outputs.release == 'true'
        id: version
        run: "::set-output name=version::$(jq --raw-output '.version' package.json).$(date +%d%m%a).$(git rev-parse --short HEAD)"

      - name: Release
        if: steps.pre-release.outputs.release == 'true'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{secrets.gh_token}}
        with:
          tag_name: v${{steps.version.outputs.version}} 
          release_name: Release ${{steps.version.outputs.version}} 
          draft: false
          prerelease: true