{"meta":{"generator":"0.10.0","format":20,"date":1636575080745},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"# node-trackmania.io\nA Node.js inplementation of Trackmania Live services ([trackmania.io](https://trackmania.io))\n\n[![Trackmania.io icon](https://trackmania.io/img/square.png)](https://trackmania.io)\n\n![Trackmania.io API](https://img.shields.io/website?down_message=Offline&label=Trackmania.io%20API&up_message=Online&url=https%3A%2F%2Ftrackmania.io)\n[![Discord](https://img.shields.io/discord/276076890714800129?color=%23FF309A&label=Discord&logo=discord&logoColor=%23FF309A)](https://openplanet.nl/link/discord)\n\n[![NPM](https://nodei.co/npm/trackmania.io.png?downloads=true&stars=true)](https://npmjs.org/trackmania.io)\n\n![GitHub package.json version](https://img.shields.io/github/package-json/v/GreepTheSheep/node-trackmania.io?logo=npm)\n![npm](https://img.shields.io/npm/dw/trackmania.io?logo=npm)\n![NPM](https://img.shields.io/npm/l/trackmania.io)\n\n![GitHub issues](https://img.shields.io/github/issues/GreepTheSheep/node-trackmania.io?logo=github)\n![GitHub pull requests](https://img.shields.io/github/issues-pr/GreepTheSheep/node-trackmania.io?logo=github)\n\n![GitHub Repo stars](https://img.shields.io/github/stars/GreepTheSheep/node-trackmania.io?logo=github&style=flat-square)\n![GitHub forks](https://img.shields.io/github/forks/GreepTheSheep/node-trackmania.io?style=flat-square)\n\n---\n\n## Disclaimer - [Can I use the Trackmania.io API for my own project?](https://openplanet.nl/tmio/api)\n\n[Please read this topic](https://openplanet.nl/tmio/api)\n\n*The User Agent Header will be automatically set to your project directory name, with your current file name included*\n\n*Most data that you'll request **is not cached!**, do your part to cache stuff and try not to do bulk requests!*\n\n**You are responsible for the program you code, if you are banned from the API don't blame the wrapper or trackmania.io, blame yourself!**\n\nIf you're still unsure about your use of the API, feel free to DM Miss#8888 with any further questions.\n\n---\n## Contributing\n\nPlease see the [CONTRIBUTING.md file](CONTRIBUTING.md)\n\n---\n## Discussion\n\nIf you want to talk about this project or just for saying hi, Join the [Openplanet Discord Server](https://openplanet.nl/link/discord), in the #trackmania-io channel\n\n---\n## Thanks\n\nThanks to [@codecat](https://github.com/codecat) for creating trackmania.io and for helping me with their API *(and updating it everytime)*.\n\nThanks to Nadeo (Trackmania's studio) for giving an API to trackmania.io.\n\nThanks to [@dassschaf](https://github.com/dassschaf) and [@stefan-baumann](https://github.com/stefan-baumann) for chat formatting remover code in regex *(it saves my life)*\n\nThanks to [@Flirno](https://github.com/Flirno) for player COTD results API\n\nThanks to [@jonese1234](https://github.com/jonese1234) for the dataset to get the players searching\n","path":"README.md"}}}},"classes":[{"name":"Client","construct":{"name":"Client","description":"Initialises a new Client","params":[{"name":"options","type":[[["defaultOptions"]]]}]},"props":[{"name":"players","description":"The player manager","type":[[["PlayerManager"]]],"meta":{"line":26,"file":"Client.js","path":"src/client"}},{"name":"maps","description":"The map manager","type":[[["MapManager"]]],"meta":{"line":32,"file":"Client.js","path":"src/client"}},{"name":"totd","description":"The TOTD manager","type":[[["TOTDManager"]]],"meta":{"line":38,"file":"Client.js","path":"src/client"}},{"name":"cotd","description":"The COTD manager","type":[[["COTDManager"]]],"meta":{"line":44,"file":"Client.js","path":"src/client"}},{"name":"clubs","description":"The club manager","type":[[["ClubManager"]]],"meta":{"line":50,"file":"Client.js","path":"src/client"}},{"name":"campaigns","description":"The campaign manager","type":[[["CampaignManager"]]],"meta":{"line":56,"file":"Client.js","path":"src/client"}},{"name":"rooms","description":"The room manager","type":[[["RoomManager"]]],"meta":{"line":62,"file":"Client.js","path":"src/client"}},{"name":"events","description":"The TM events manager","type":[[["EventManager"]]],"meta":{"line":68,"file":"Client.js","path":"src/client"}}],"meta":{"line":19,"file":"Client.js","path":"src/client"}},{"name":"CacheManager","construct":{"name":"CacheManager","description":"Creates a new CacheManager instance.","params":[{"name":"client","description":"The client instance.","type":[[["Client"]]]},{"name":"from","description":"The class that instants this manager.","type":[["*"]]}]},"props":[{"name":"client","description":"The client instance.","type":[[["Client"]]],"meta":{"line":16,"file":"CacheManager.js","path":"src/managers"}},{"name":"from","description":"The class that instantiated this manager.","type":[["*"]],"meta":{"line":22,"file":"CacheManager.js","path":"src/managers"}},{"name":"_ttl","description":"The time to live for the cache in miliseconds.","access":"private","type":[[["number"]]],"meta":{"line":35,"file":"CacheManager.js","path":"src/managers"}}],"methods":[{"name":"_reset","description":"Resets the cache based on the ttl.","access":"private","meta":{"line":44,"file":"CacheManager.js","path":"src/managers"}}],"meta":{"line":9,"file":"CacheManager.js","path":"src/managers"}},{"name":"TMMap","construct":{"name":"TMMap","description":"Represents a map on Trackmania."},"props":[{"name":"client","description":"The client instance.","type":[[["Client"]]],"meta":{"line":15,"file":"TMMap.js","path":"src/structures"}},{"name":"_data","description":"The map data.","access":"private","type":[[["Object"]]],"meta":{"line":22,"file":"TMMap.js","path":"src/structures"}},{"name":"medalTimes","description":"The map medal times.","type":[[["TMMapMedalTimes"]]],"meta":{"line":28,"file":"TMMap.js","path":"src/structures"}},{"name":"name","description":"The map name.","type":[[["string"]]],"meta":{"line":44,"file":"TMMap.js","path":"src/structures"}},{"name":"id","description":"The map id.","type":[[["string"]]],"meta":{"line":52,"file":"TMMap.js","path":"src/structures"}},{"name":"uid","description":"The map uid.","type":[[["string"]]],"meta":{"line":60,"file":"TMMap.js","path":"src/structures"}},{"name":"environment","description":"The environment for this map.","type":[[["string"]]],"meta":{"line":89,"file":"TMMap.js","path":"src/structures"}},{"name":"fileName","description":"The map file name.","type":[[["string"]]],"meta":{"line":97,"file":"TMMap.js","path":"src/structures"}},{"name":"uploaded","description":"The map uploaded date.","type":[[["Date"]]],"meta":{"line":105,"file":"TMMap.js","path":"src/structures"}},{"name":"url","description":"The map URL.","type":[[["string"]]],"meta":{"line":113,"file":"TMMap.js","path":"src/structures"}},{"name":"thumbnail","description":"The map thumbnail.","type":[[["string"]]],"meta":{"line":121,"file":"TMMap.js","path":"src/structures"}},{"name":"exchangeId","description":"The map exchange id, if the map is on trackmania.exchange, else null.","nullable":true,"type":[[["string"]]],"meta":{"line":129,"file":"TMMap.js","path":"src/structures"}},{"name":"exchange","description":"The map informations on trackmania.exchange.","nullable":true,"type":[[["TMExchangeMap"]]],"meta":{"line":138,"file":"TMMap.js","path":"src/structures"}},{"name":"_TMExchange","access":"private","type":[[["TMExchangeMap"]]],"meta":{"line":147,"file":"TMMap.js","path":"src/structures"}},{"name":"karma","description":"The map karma.","nullable":true,"type":[[["TMMapKarma"]]],"meta":{"line":158,"file":"TMMap.js","path":"src/structures"}},{"name":"_TMMapKarma","access":"private","type":[[["TMMapKarma"]]],"meta":{"line":165,"file":"TMMap.js","path":"src/structures"}},{"name":"leaderboard","description":"The map leaderboard.","nullable":true,"type":[[["Array","<"],["TMMapLeaderboard",">"]]],"meta":{"line":175,"file":"TMMap.js","path":"src/structures"}}],"methods":[{"name":"author","description":"The map author.","examples":["Client.maps.get('z28QXoFnpODEGgg8MOederEVl3j').then(async map => {\n    const author = await map.author();\n    console.log(`The map author is ${author.name}`);\n});"],"async":true,"returns":[[["Promise","<"],["Player",">"]]],"meta":{"line":73,"file":"TMMap.js","path":"src/structures"}},{"name":"submitter","description":"The map submitter.","async":true,"returns":[[["Promise","<"],["Player",">"]]],"meta":{"line":81,"file":"TMMap.js","path":"src/structures"}},{"name":"leaderboardLoadMore","description":"Load more in the leaderboard","async":true,"returns":{"types":[[["Promise","<"],["Array","<"],["TMMapLeaderboard",">>"]]],"nullable":true},"meta":{"line":189,"file":"TMMap.js","path":"src/structures"}}],"meta":{"line":9,"file":"TMMap.js","path":"src/structures"}},{"name":"ReqUtil","description":"Util for API requests","access":"private","meta":{"line":5,"file":"ReqUtil.js","path":"src/util"}}],"interfaces":[],"typedefs":[],"externals":[]}